// Order status enum
enum OrderStatus {
  PENDING
  CONFIRMED
  DELIVERED
  CANCELLED
}

model order {
  id        Int             @id @default(autoincrement())
  userId    Int
  status    OrderStatus     @default(PENDING)
  total     Float
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  items     order_item[]
  shipping  order_shipping?
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model order_item {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  colorId   Int?
  sizeId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color?  @relation(fields: [colorId], references: [id], onDelete: SetNull)
  size    Size?   @relation(fields: [sizeId], references: [id], onDelete: SetNull)

  @@map("order_items")
}

model order_shipping {
  id         Int      @id @default(autoincrement())
  orderId    Int      @unique
  fullName   String
  address1   String
  address2   String?
  city       String
  state      String
  postalCode String
  country    String
  phone      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_shipping")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  orders    order[]

  @@map("users")
}

// Post model
model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model product {
  id                 Int                @id @default(autoincrement())
  title              String
  subtitle           String?
  description        String?
  basePrice          Float
  discountedPrice    Float?
  isFeatured         Boolean            @default(false)
  isNewArrival       Boolean            @default(false)
  isOnSale           Boolean            @default(false)
  isExclusive        Boolean            @default(false)
  isLimitedEdition   Boolean            @default(false)
  isBestSeller       Boolean            @default(false)
  isTrending         Boolean            @default(false)
  isHot              Boolean            @default(false)
  isPublished        Boolean            @default(false)
  sku                String             @unique
  discountPercentage Float?
  material           String?
  dimensions         String?
  capacity           String?
  // stock              Int               @default(0)
  barcode            String?            @unique
  weight             String?
  published          Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  product_colors     product_colors[]
  product_pricing    product_pricing[]
  product_quantity   product_quantity[]
  product_size       product_size[]
  product_feature    product_feature[]
  product_metatag    product_metatag?
  product_faq        product_faq[]
  product_categories ProductCategory[] // NEW: many-to-many with categories
  medias             ProductMedia[]
  product_tags       product_tags[]
  product_image      product_image[]
  product_video      product_video[] // YouTube videos relation
  order_items        order_item[]

  @@map("products")
}

// model ProductOrderQRCode {
//   id        Int      @id @default(autoincrement())
//   code      String   @unique         // QR code content (could be URL or encoded SKU)
//   type      String?                 // optional: "marketing", "inventory", etc.
//   product   Product  @relation(fields: [productId], references: [id])
//   productId Int
//   createdAt DateTime @default(now())
//   expiresAt DateTime?                 // optional
// }
// NEW: shared colors table
model Color {
  id             Int                @id @default(autoincrement())
  name           String
  hexCode        String?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  products       product_colors[]
  pricing_rules  product_pricing[] // NEW: relation to pricing rules
  quantity_rules product_quantity[] // NEW: relation to quantity rules
  order_items    order_item[]

  @@unique([name, hexCode])
  @@map("colors")
}

// CHANGED: make product_colors a join table between product and Color
model product_colors {
  // Composite PK to ensure one color per product only once
  productId Int
  colorId   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color   @relation(fields: [colorId], references: [id], onDelete: Cascade)

  @@id([productId, colorId])
  @@map("product_colors")
}

model product_image {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String
  alt       String?
  position  Int? // ordering
  level     String? // e.g., "thumbnail", "gallery", "detail"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_images")
}

model product_tags {
  id        Int      @id @default(autoincrement())
  productId Int
  tag       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_tags")
}

model product_pricing {
  id        Int @id @default(autoincrement())
  productId Int

  // Variant-specific pricing (optional - for color+size combinations)
  colorId Int? // Optional: specific color
  sizeId  Int? // Optional: specific size

  // Quantity-based pricing tiers
  min_quantity        Int    @default(1)
  max_quantity        Int? // NULL means unlimited/no upper limit
  unit_price          Float
  discount_percentage Float?

  // Rule metadata
  rule_name String? // e.g., "Bulk Discount", "VIP Pricing", "Black 41 Special"
  rule_type String  @default("STANDARD") // STANDARD, BULK, VARIANT, VIP, etc.
  is_active Boolean @default(true)
  priority  Int     @default(1) // Higher number = higher priority

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color?  @relation(fields: [colorId], references: [id], onDelete: SetNull)
  size    Size?   @relation(fields: [sizeId], references: [id], onDelete: SetNull)

  // Ensure no duplicate rules for same product+variant+quantity range
  @@unique([productId, colorId, sizeId, min_quantity])
  @@index([productId, rule_type, is_active])
  @@index([productId, colorId, sizeId])
  @@map("product_pricing")
}

model product_quantity {
  id        Int @id @default(autoincrement())
  productId Int

  // Variant-specific quantity (optional - for color+size combinations)
  colorId Int? // Optional: specific color
  sizeId  Int? // Optional: specific size

  // Quantity information
  available_quantity Int  @default(0)
  reserved_quantity  Int  @default(0) // For orders in progress
  minimum_threshold  Int  @default(0) // Alert when stock is low
  maximum_capacity   Int? // NULL means no limit

  // Metadata
  is_active Boolean @default(true)
  notes     String? // Additional information about this variant

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  product product @relation(fields: [productId], references: [id], onDelete: Cascade)
  color   Color?  @relation(fields: [colorId], references: [id], onDelete: SetNull)
  size    Size?   @relation(fields: [sizeId], references: [id], onDelete: SetNull)

  // Ensure no duplicate quantity records for same product+variant
  @@unique([productId, colorId, sizeId])
  @@index([productId, is_active])
  @@index([productId, colorId, sizeId])
  @@map("product_quantity")
}

// NEW: shared sizes table
model Size {
  id             Int                @id @default(autoincrement())
  value          String // e.g., "42", "M", "10.5"
  system         String? // e.g., "EU", "US", "UK" (optional)
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  products       product_size[]
  pricing_rules  product_pricing[] // NEW: relation to pricing rules
  quantity_rules product_quantity[] // NEW: relation to quantity rules
  order_items    order_item[]

  @@unique([value, system])
  @@map("sizes")
}

// UPDATED: make product_size a join table between product and Size
model product_size {
  productId Int
  sizeId    Int
  // quantity  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      Size     @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@id([productId, sizeId])
  @@map("product_size")
}

model product_feature {
  id            Int      @id @default(autoincrement())
  productId     Int
  feature_title String
  feature_desc  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_features")
}

model product_faq {
  id        Int      @id @default(autoincrement())
  productId Int
  question  String
  answer    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_faqs")
}

// Product metatags for SEO / Open Graph per product
model product_metatag {
  id              Int      @id @default(autoincrement())
  productId       Int      @unique
  metaTitle       String?
  metaDescription String?
  metaKeywords    String?
  ogTitle         String?
  ogDescription   String?
  ogImage         String?
  canonicalUrl    String?
  robotsIndex     Boolean? @default(true)
  robotsFollow    Boolean? @default(true)
  priority        Float?   @default(0.5)
  changefreq      String? // e.g., 'daily', 'weekly'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_metatags")
}

model category {
  id       Int    @id @default(autoincrement())
  name     String @unique
  parentId Int?

  // Hierarchy (self-relation)
  parent   category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children category[] @relation("CategoryHierarchy")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Join to products
  products ProductCategory[]

  @@map("product_categories")
}

// NEW: join table between product and category
model ProductCategory {
  productId  Int
  categoryId Int
  product    product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([productId, categoryId])
  @@map("product_category_links")
}

model ProductMedia {
  id        Int      @id @default(autoincrement())
  productId Int
  type      String // "image" | "video"
  url       String
  publicId  String? // Cloudinary public_id
  position  Int? // ordering
  alt       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@map("product_media")
}

// YouTube authentication for single dedicated channel
model YouTubeAuth {
  id           String    @id @default("default")
  accessToken  String
  refreshToken String?
  expiryDate   DateTime?
  scope        String?
  channelId    String? // YouTube channel ID
  channelName  String? // YouTube channel name
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("youtube_auth")
}

// Product video status enum
enum ProductVideoStatus {
  QUEUED
  UPLOADING
  PROCESSING
  LIVE
  FAILED
}

// Product videos for YouTube upload
model product_video {
  id          Int       @id @default(autoincrement())
  productId   Int
  iframeUrl   String? // YouTube embed URL (null until live)
  videoType   String? // e.g., "mainVideo", "cuttingVideo", "stitchingVideo","assemblyVideo"
  scheduledAt DateTime? // When to attempt upload
  uploadedAt  DateTime? // When successfully uploaded
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  product product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  // @@index([status])
  @@map("product_videos")
}

// youtubeVideoId String? // YouTube video ID (null until uploaded)
// originalFileName String // Original file name
// filePath         String? // Temporary file path for processing
// title            String?
// description      String?
// status           ProductVideoStatus @default(QUEUED)
// errorMessage     String? // Error details if upload fails
// position         Int? // ordering
// uploadAttempts   Int                @default(0)
